package com.cnk.travelerp.common.util;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;


public class FileList {

	private static String[] excludes  = 
			new String[]{"target",".class",".svn",".rtf"};

	public static void listFilesForFolder(final File baseFolder, final File folder,List<FileInfo> files) {
	    for (final File fileEntry : folder.listFiles()) {
	    	
	    	
	    	if (isFileContainTypes(excludes, fileEntry.getAbsolutePath())){
	    		continue;
	    	}
	    	
	        if (fileEntry.isDirectory()) {
	            listFilesForFolder(baseFolder,fileEntry,files);
	        } else {
	        	String path = fileEntry.getAbsolutePath().replace("\\", "/");
	        	String path1 = baseFolder.getAbsolutePath().replace("\\", "/");
	        	path = path.substring(path1.length());
	        			
	            System.out.println(path+" "+fileEntry.getName());
	            files.add(new FileInfo(path,fileEntry.length()));
	        }
	    }
	}

	public static boolean isFileContainTypes(String[] array, String objectToFind){
		for(String s:array){
			if (objectToFind.contains(s)){
				return true;
			}
		}
		return false;
	}
	
	public static void write (String filename, Map<String,String[]> fileMap) throws IOException{
		  BufferedWriter outputWriter = null;
		  outputWriter = new BufferedWriter(new FileWriter(filename));
		  
		  for(Map.Entry<String, String[]> row:fileMap.entrySet()){
			  outputWriter.write("FileName:"); outputWriter.write(row.getKey());outputWriter.newLine();
			  outputWriter.write("<<START_FILE>>"); outputWriter.newLine();
			  for (String s: row.getValue()) {
				  outputWriter.write(s); outputWriter.newLine();
			  }
			  outputWriter.write("<<END_FILE>>"); outputWriter.newLine();
		  }
		  outputWriter.flush();  
		  outputWriter.close();  
		}
	
	public static final void main(String[] args) throws Exception{
		//D:\travelerpbranches\travelerp1.0\common\cnk-common-audit
		String rootDirectory = "D:/travelerpbranches/travelerp1.0/common";
		final File folder = new File(rootDirectory);
		List<FileInfo> files = new ArrayList<>();
		listFilesForFolder(folder,folder,files);
		
		long totalSize = 0;
		for(FileInfo f: files){
			totalSize+=f.length;
		}
		
		
		long totalLineOfCode = 0;
		Map<String,String[]> linesMap = new LinkedHashMap<>();
		for(FileInfo f: files){
			Scanner sc = new Scanner(new File(rootDirectory+"/"+f.fileName));
			List<String> lines = new ArrayList<String>();
			while (sc.hasNextLine()) {
				lines.add(sc.nextLine());
			}
//			totalLineslines.addAll(lines);
			String[] arr = lines.toArray(new String[lines.size()]);
			linesMap.put(f.fileName,arr);
			totalLineOfCode +=lines.size();
		}

		System.out.println("File Count : "+files.size() + " Total File size :"+ (totalSize/(1024*1024))+"mb line of code: "+totalLineOfCode);

		String outfileNamePreFix = "OUTFILE_"; 
		String type = ".txt"; 

		int linecount =0;
		int index = 0;
		Map<String,String[]> map1 = new LinkedHashMap<>();
		for(Map.Entry<String, String[]> row:linesMap.entrySet()){
			linecount += row.getValue().length;
			map1.put(row.getKey(),row.getValue());
			if (linecount >= 2000){
				String fileName = outfileNamePreFix+index+type;
				//call to process
				write(fileName,map1);
				map1.clear();
				linecount = 0;
			}
			
			index++;
		}

//		boolean b = isFileContainTypes(excludes, "D:\\travelerpbranches\\travelerp1.0\\common\\cnk-commons\\target\\maven-archiver");
//		System.out.println(b);
		
	}
	
	
	
	
	static class FileInfo {
		String fileName;
		long length;
		public FileInfo(String fileName, long length) {
			super();
			this.fileName = fileName;
			this.length = length;
		}
		
		
	}
}