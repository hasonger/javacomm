package com.cnk.travelerp.model.commercials.predicates;

import java.util.Date;

import org.joda.time.DateTime;
import org.joda.time.Interval;

public class PredicateUtils {
	private static String ALL = "All";

	
	public static boolean isInDateRang(Date startDate, Date endDate,Date checkDate){
		   Interval interval = new Interval(new DateTime(startDate), 
                new DateTime(endDate));   
		  return interval.contains(new DateTime(checkDate)); 
	}
	
	public static boolean isWithAll(String[] checkByObjects){
		boolean retVal = true;
		for(int i=0;i<checkByObjects.length;i++){
			if (!ALL.equals( checkByObjects[i]) ){
				retVal = false;
				break;
			}
		}
		return retVal;
	}
	public static int occuranceOfAll(String[] checkByObjects){
		int count=0;
		for(int i=0;i<checkByObjects.length;i++){
			if (ALL.equals( checkByObjects[i]) ){
				count++;
			}
		}
		return count;
	}

	public static boolean isTrue(String[] checkByObjects,String[] checkWithObjects, int[] indexes){
		boolean retVal = true;
		
		boolean[] b = new boolean[indexes.length];
		for(int i=0;i<indexes.length;i++){
			b[i] =  checkByObjects[indexes[i]].equals(checkWithObjects[indexes[i]]);
		}
		
		for(int i=0;i<indexes.length;i++){
			retVal = retVal && b[i];
		}
		return retVal;
		
//		for(int i=0;i<checkByObjects.length;i++){
//			boolean inIndex = false;
//			for(int j=0;j<indexes.length;j++){
//				if (indexes[j] == i){
//					inIndex = true;
//					retVal =  checkByObjects[i].equals(checkWithObjects[i]);
//				}
//			}
//			if (!ALL.equals( checkByObjects) && !inIndex){
//				retVal = false;
//			}
//			if (!retVal){
//				return retVal;
//			}
//		}
//		return retVal;
	}

	static int[][] buildIndexes(int length, int size){
		if (length < size || length==0 || size ==0){
			throw new IllegalArgumentException("Value should be specified for both : lenght and size. Also Length should be greater than size.");
		}
		if (size > 7){
			throw new IllegalArgumentException("The maximum size is 7.");
		}
		if (size == length){
			int[] arr = new int[size];
			for(int i=0;i<size;i++){
				arr[i] = i;
			}
			return new int[][]{arr};
		}

		return index_matrix[length-2][size-1];

		
//		int[][] retArr = new int[(length-size)+1][size];
//		for(int i=0;i<((length-size)+1);i++){
//			int arrL = size-i;
//			int[][] arrN = new int[arrL][size];
//			int[] arr = new int[size];
//			for(int j=0;j<size;j++){
//				arr[j] = i+j;
//				for(int k=0;k<arrN.length;k++){
//					int[] arrT = arrN[k];
//					if (k > j){
//						arrT[j] = i+j+k;
//					}
//					else {
//						arrT[j] = i+j;
//					}
//				}
//				
//			}
//			retArr[i] = arr;
//		}
//		return retArr;
		
	}


	private static int[][] matrix_2with1 = new int[][]{{0},{1}};

	private static int[][] matrix_3with2 = new int[][]{{0,1},{0,2},{1,2}};
	private static int[][] matrix_3with1 = new int[][]{{0},{1},{2}};


	private static int[][] matrix_4with3 = new int[][]{{0,1,2},{0,1,3},{0,2,3},{1,2,3}};
	private static int[][] matrix_4with2 = new int[][]{{0,1},{0,2},{0,3},{1,2},{1,3},{2,3}};
	private static int[][] matrix_4with1 = new int[][]{{0},{1},{2},{3}};



	
	private static int[][] matrix_5with4 = new int[][]{{0,1,2,3},{0,1,2,4},{0,1,3,4},{0,2,3,4},{1,2,3,4}};
	private static int[][] matrix_5with3 = new int[][]{{0,1,2},{0,1,3},{0,1,4},{0,2,3},{0,2,4},{0,3,4},{1,2,3},{1,2,4},{1,3,4},{2,3,4}};
	private static int[][] matrix_5with2 = new int[][]{{0,1},{0,2},{0,3},{0,4},{1,2},{1,3},{1,4},{2,3},{2,4},{3,4}};
	private static int[][] matrix_5with1 = new int[][]{{0},{1},{2},{3},{4}};

	private static int[][] matrix_6with5 = new int[][]{{0,1,2,3,4},{0,1,2,3,5},{0,1,2,4,5},{0,1,3,4,5},{0,2,3,4,5},{1,2,3,4,5}};
	private static int[][] matrix_6with4 = new int[][]{{0,1,2,3},{0,1,2,4},{0,1,2,5},{0,1,3,4},{0,1,3,5},{0,1,4,5},	{0,2,3,4},{0,2,3,5},{0,3,4,5},
														{1,2,3,4},{1,2,3,5},{1,2,4,5},{1,3,4,5},
														{2,3,4,5}};
	private static int[][] matrix_6with3 = new int[][]{{0,1,2},{0,1,3},{0,1,4},{0,1,5},
															{0,2,3},{0,2,4},{0,2,5},{0,3,4},{0,3,5},{0,4,5},
														{1,2,3},{1,2,4},{1,2,5},{1,3,4},{1,3,5},
														{2,3,4},{2,3,5},{3,4,5}};
	private static int[][] matrix_6with2 = new int[][]{{0,1},{0,2},{0,3},{0,4},{0,5},
														{1,2},{1,3},{1,4},{1,5},{2,3},{2,4},{2,5},{3,4},{3,5},{4,5}};
	private static int[][] matrix_6with1 = new int[][]{{0},{1},{2},{3},{4},{5}};


	private static int[][] matrix_7with6 = new int[][]{{0,1,2,3,4,5},{0,1,2,3,4,6},{0,1,2,3,5,6},{0,1,2,4,5,6},
															{0,1,3,4,5,6},{0,2,3,4,5,6},{1,2,3,4,5,6}};
	
	private static int[][] matrix_7with5 = new int[][]{{0,1,2,3,4},{0,1,2,3,5},{0,1,2,3,6},
														{0,1,2,4,5},{0,1,2,4,6},{0,1,2,5,6},
														{0,1,3,4,5},{0,1,3,4,6},{0,1,3,5,6},{0,1,4,5,6},
														{0,2,3,4,5},{0,2,3,4,6},{0,2,3,5,6},{0,3,4,5,6},
														{1,2,3,4,5},{1,2,3,4,6},{1,2,3,5,6},
														{2,3,4,5,6}};
	private static int[][] matrix_7with4 = new int[][]{{0,1,2,3},{0,1,2,4},{0,1,2,5},{0,1,2,6},{0,1,3,4},{0,1,3,5},{0,1,3,6},{0,1,4,5},{0,1,4,6},{0,1,5,6},
														{0,2,3,4},{0,2,3,5},{0,2,3,6},{0,2,4,5},{0,2,4,6},{0,2,5,6},
														{0,3,4,5},{0,3,4,6},{0,3,5,6},{0,4,5,6},
														{1,2,3,4},{1,2,3,5},{1,2,3,6},{1,2,4,5},{1,2,4,6},{1,2,5,6},
														{1,3,4,5},{1,3,4,6},{1,3,5,6},{1,4,5,6},
														{2,3,4,5},{2,3,4,6},{2,3,5,6},{2,4,5,6},{3,4,5,6}};
	private static int[][] matrix_7with3 = new int[][]{{0,1,2},{0,1,3},{0,1,4},{0,1,5},{0,1,6},
															{0,2,3},{0,2,4},{0,2,5},{0,2,6},{0,3,4},{0,3,5},{0,3,6},
															{0,4,5},{0,4,6},
														{1,2,3},{1,2,4},{1,2,5},{1,2,6},
														{1,3,4},{1,3,5},{1,3,6},{1,4,5},{1,4,6},{1,5,6},
														{2,3,4},{2,3,5},{2,3,6},{2,4,5},{2,4,6},{2,5,6},
														{3,4,5},{3,4,6},{3,5,6},{4,5,6}};
	private static int[][] matrix_7with2 = new int[][]{{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},
														{1,2},{1,3},{1,4},{1,5},{1,6},
														{2,3},{2,4},{2,5},{2,6},
														{3,4},{3,5},{3,6},{4,5},{4,6}};
	private static int[][] matrix_7with1 = new int[][]{{0},{1},{2},{3},{4},{5},{6}};

	
	
	
	private static int[][][][] index_matrix = { {matrix_2with1},
		{matrix_3with1,matrix_3with2},
		{matrix_4with1,matrix_4with2,matrix_4with3},
		{matrix_5with1,matrix_5with2,matrix_5with3,matrix_5with4},
		{matrix_6with1,matrix_6with2,matrix_6with3,matrix_6with4,matrix_6with5},
		{matrix_7with1,matrix_7with2,matrix_7with3,matrix_7with4,matrix_7with5,matrix_7with6},
	  };
	
	public static final void main(String[] args) throws Exception{
		
		for(int i=2;i<9;i++){
			for(int j=1;j<=i;j++){
				int[][] result = buildIndexes(i,j);
				StringBuilder sb = new StringBuilder();
				sb.append("{");
				for(int k=0;k<result.length;k++){
					if (k>0){
						sb.append(",");
					}
					
					int[] r = result[k];
					sb.append("{");
					
					for(int s=0;s<r.length;s++){
						if (s>0){
							sb.append(",");
						}
						sb.append(r[s]);
					}
					sb.append("}");
				}
				sb.append("}");
				System.out.println(" length : "+i + " size " + j + " arrSize :"+result.length+ " : "+sb.toString());
				
			}
		}
		
//		int[][] result = buildIndexes(3,3);
//		int[][] result1 = buildIndexes(3,2);
//		int[][] result2 = buildIndexes(3,1);
//
//		result = buildIndexes(4,4);
//		result1 = buildIndexes(4,3);
//		result2 = buildIndexes(4,2);
//		result2 = buildIndexes(4,1);
//
//		result = buildIndexes(5,4);
//		result1 = buildIndexes(5,3);
//		result2 = buildIndexes(5,2);
//		result2 = buildIndexes(5,1);

	}
}